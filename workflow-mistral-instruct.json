{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/new-comment",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -320,
        64
      ],
      "id": "c2ed34fa-4b3c-4829-bf91-00a2f55dcdee",
      "name": "Webhook",
      "webhookId": "f30116c7-61ea-4842-8e05-776ee254bb19",
      "notesInFlow": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"phi3\",\n  \"prompt\": \"Voici un commentaire utilisateur : \\\"{{ $json.body.comment }}\\\"\\n\\n1) Résume en une phrase max 15 mots.\\n2) Analyse le sentiment : positif, neutre, négatif.\\n3) Dégage les mots clés principaux.\\nRéponds uniquement par un JSON strict, sans guillemets triples ni texte superflu, exactement comme ça : {\\\"id\\\": \\\"{{ $json.body.id }}\\\", \\\"résumé\\\": \\\"...\\\", \\\"sentiment\\\": \\\"...\\\", \\\"mots_clés\\\": [\\\"...\\\", \\\"...\\\"]}.\\nAttention : utilise les bons noms de clés, aucune faute de frappe.\",\n  \"stream\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -160,
        -112
      ],
      "id": "322c0205-2958-4a4a-8483-52c7228e45ba",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://web:5000/comments/{{ $json.id }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"résumé\": \"{{ $json.résumé }}\",\n  \"sentiment\": \"{{ $json.sentiment }}\",\n  \"mots_clés\": {{ JSON.stringify($json.mots_clés) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        80
      ],
      "id": "dcae1d2b-4918-4bed-aa27-2e8050ec7976",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  let raw = item.json.response;\n\n  // Supprime balises markdown, backticks, espaces inutiles\n  raw = raw.replace(/```json|```/g, '').trim();\n\n  // Fonction pour extraire un JSON valide basé sur les accolades équilibrées\n  function extractJSON(str) {\n    let depth = 0;\n    let start = -1;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '{') {\n        if (depth === 0) start = i;\n        depth++;\n      } else if (str[i] === '}') {\n        depth--;\n        if (depth === 0 && start !== -1) {\n          return str.substring(start, i + 1);\n        }\n      }\n    }\n    return null; // Pas trouvé\n  }\n\n  const jsonString = extractJSON(raw);\n  if (!jsonString) {\n    return { json: { error: 'Pas de JSON valide détecté', raw } };\n  }\n\n  // Tenter de parser directement\n  try {\n    const parsed = JSON.parse(jsonString);\n    return { json: parsed };\n  } catch (err) {\n    // Si erreur, essayer un nettoyage basique : échappement des guillemets intérieurs\n    let cleaned = jsonString\n      .replace(/\\r?\\n/g, '\\\\n') // échappe les retours à la ligne\n      .replace(/(?<!\\\\)\"/g, '\\\\\"'); // échappe guillemets non échappés\n\n    // Retirer les guillemets échappés en trop autour des clés et valeurs\n    // (c’est délicat, on peut essayer un replace simple mais ça peut casser le JSON)\n\n    try {\n      // On essaie de reparser le nettoyage (probablement échoué si la chaîne n'était pas un JSON pur)\n      const reparsed = JSON.parse(cleaned);\n      return { json: reparsed };\n    } catch (error2) {\n      // On renvoie l'erreur avec la chaîne problématique pour debug\n      return { json: { error: 'Erreur parsing JSON après nettoyage', message: error2.message, raw: cleaned } };\n    }\n  }\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        -64
      ],
      "id": "8dd1f534-fa38-4c93-9d94-47a34e1aba27",
      "name": "Code"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        272
      ],
      "typeVersion": 1,
      "id": "4add2db2-963d-46d4-9598-c4d5c4a668cc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const comment = $json.body.comment;\nconst id = $json.body.id;\n\nreturn {\n  json: {\n    model: \"mistral:instruct\",\n    stream: false,\n    prompt:\n      `Tu es un assistant de traitement de commentaires clients.\\n` +\n      `Analyse uniquement ce commentaire : \"${comment}\".\\n\\n` +\n      `Réponds strictement dans ce format JSON exact, valide et sans erreur : ` +\n      `{\"id\": \"${id}\", \"résumé\": \"...\", \"sentiment\": \"...\", \"mots_clés\": [\"...\", \"...\"]}\\n\\n` +\n      `Contraintes :\\n` +\n      `- Le résumé doit faire maximum 15 mots, en français clair.\\n` +\n      `- Le sentiment doit être obligatoirement \"positif\", \"neutre\" ou \"négatif\".\\n` +\n      `- Les mots clés doivent être extraits du commentaire, en français, pertinents et en lien direct avec le contenu.\\n` +\n      `- Toutes les clés doivent être entre guillemets doubles.\\n` +\n      `- Aucune autre clé ou donnée ne doit être ajoutée.\\n` +\n      `- Ne réponds jamais avec du texte hors JSON, ni avec des balises markdown, ni guillemets triples.\\n` +\n      `- Ne mélange aucune autre langue ou alphabet, que le français standard.\\n` +\n      `- Si tu ne peux pas respecter ces règles, réponds avec ce JSON vide : ` +\n      `{\"id\": \"${id}\", \"résumé\": \"\", \"sentiment\": \"neutre\", \"mots_clés\": []}.\\n\\n` +\n      `Réponds uniquement avec ce JSON strict, rien d’autre.`\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        272
      ],
      "id": "39b92111-e1a5-4f4b-90f0-a1942f2398b7",
      "name": "Code1",
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        112
      ],
      "id": "e6159fe4-c030-4778-8658-032aaf918b23",
      "name": "HTTP Request2"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4e8e3ed7-ddfa-4717-bc3a-5fa4935dc6d1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "93d825bc7c4da3815821a6487db505d2e6edab50f4ef01e2c9937f92cbff7f1f"
  },
  "id": "xGTeGEAuU8hGDIiO",
  "tags": []
}